# OAuth 2.0 Token Introspection configuration
subrequest_output_buffer_size     16k; # To fit a complete response from OAuth server
# set $oauth_introspection_endpoint "http://users_api/connect/introspect";
set $oauth_client_id              "gateway"; # Will use HTTP Basic authentication unless empty
set $oauth_client_secret          "gateway_secret"; # If id is empty this will be used as a bearer token

if ($access_token = "") { # if Authorization header is not present, then try to get it from query
    set $access_token $arg_access_token;
}

location = /_oauth2_token_introspection {
    # This location implements an auth_request server that uses the JavaScript
    # module to perform the token introspection request.
    internal;
    js_content introspectAccessToken;
}
location = /_oauth2_send_introspection_request {
    # This location is called by introspectAccessToken(). We use the proxy_
    # directives to construct an OAuth 2.0 token introspection request, as per:
    #  https://tools.ietf.org/html/rfc7662#section-2
    internal;
    gunzip on; # Decompress if necessary

    proxy_method      POST;
    include           /etc/nginx/proxy_headers;
    proxy_set_header  Authorization $arg_authorization;
    proxy_set_header  Content-Type "application/x-www-form-urlencoded";
    proxy_set_body    "token=$arg_token&token_hint=access_token";
    # proxy_pass        $oauth_introspection_endpoint;

    proxy_cache           token_responses; # Enable caching of token introspection responses
    proxy_cache_key       $access_token;   # Cache the response for each unique access token
    proxy_cache_lock      on;              # Don't allow simultaneous requests for same token
    proxy_cache_valid     200 10s;         # How long to use cached introspection responses
    proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server
    proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
}